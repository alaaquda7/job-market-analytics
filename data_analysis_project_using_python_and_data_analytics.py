# -*- coding: utf-8 -*-
"""Data Analysis Project Using Python and Data Analytics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CH034eLGLNxZeT9NhOJ6UrudB8yTjep3
"""

pip install pandas matplotlib seaborn

pip install folium

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

try:
    import folium
except ImportError:
    folium = None

sns.set_style('whitegrid')

def load_data(file_path):
    df = pd.read_csv(file_path)
    # تنظيف النصوص وأعمدة الفئات
    for col in ['Job_Title', 'Industry', 'Company_Size', 'Location', 'AI_Adoption_Level',
                'Automation_Risk', 'Remote_Friendly', 'Job_Growth_Projection', 'Required_Skills']:
        df[col] = df[col].astype(str).str.strip().str.lower()
    df.dropna(inplace=True)
    return df

def summary_stats(df, group_col, target_col='Salary_USD'):
    stats = df.groupby(group_col)[target_col].agg(['count', 'mean', 'median', 'std']).sort_values(by='mean', ascending=False)
    print(f"\nSummary statistics for {target_col} grouped by {group_col}:\n", stats)
    return stats

def plot_top_categories(df, col, top_n=10, save_path=None):
    plt.figure(figsize=(12,6))
    top = df[col].value_counts().head(top_n)
    sns.barplot(x=top.values, y=top.index, palette='viridis')
    plt.title(f'Top {top_n} {col.replace("_", " ").title()}')
    plt.xlabel('Count')
    plt.ylabel(col.replace('_', ' ').title())
    if save_path:
        plt.savefig(save_path, bbox_inches='tight')
    plt.show()

def plot_salary_distribution(df, group_col, save_path=None):
    plt.figure(figsize=(14,7))
    sns.boxplot(x=group_col, y='Salary_USD', data=df)
    plt.xticks(rotation=45)
    plt.title(f'Salary Distribution by {group_col.replace("_", " ").title()}')
    if save_path:
        plt.savefig(save_path, bbox_inches='tight')
    plt.show()

def analyze_skills(df, skills_list, save_dir=None):
    # نفصل المهارات المتعددة في عمود 'Required_Skills' إلى قائمة
    df['skills_list'] = df['Required_Skills'].apply(lambda x: [skill.strip() for skill in x.replace(';', ',').replace('.', ',').split(',')])

    for skill in skills_list:
        df[f'has_{skill}'] = df['skills_list'].apply(lambda skills: skill.lower() in skills)

        plt.figure(figsize=(10,6))
        sns.boxplot(data=df, x=f'has_{skill}', y='Salary_USD', palette='coolwarm')
        plt.title(f'Salary Distribution for Jobs Requiring {skill.title()}')
        plt.xlabel(f'Requires {skill.title()}')
        plt.ylabel('Salary USD')

        if save_dir:
            os.makedirs(save_dir, exist_ok=True)
            plt.savefig(f'{save_dir}/salary_{skill}.png', bbox_inches='tight')
        plt.show()

def plot_remote_friendly(df, save_path=None):
    remote_counts = df['Remote_Friendly'].value_counts()
    plt.figure(figsize=(6,6))
    plt.pie(remote_counts.values, labels=remote_counts.index, autopct='%1.1f%%', colors=['#66b3ff','#ff9999'])
    plt.title('Remote Friendly Job Percentage')
    if save_path:
        plt.savefig(save_path, bbox_inches='tight')
    plt.show()

def plot_geo_distribution(df, location_col='Location', save_path=None):
    if folium is None:
        print("مكتبة folium غير مثبتة، لا يمكن عمل التحليل الجغرافي.")
        return

    # تجميع عدد الوظائف حسب الموقع
    location_counts = df[location_col].value_counts().reset_index()
    location_counts.columns = [location_col, 'count']

    # خريطة مركزة على نقطة وسط (يمكن تغيير الإحداثيات حسب بياناتك)
    m = folium.Map(location=[20,0], zoom_start=2)

    # ملاحظة: هنا مثال عام لأن إحداثيات المدن غير متوفرة في الداتا، يمكن إضافة إحداثيات مدن يدويًا أو استدعاؤها من API خارجي
    city_coords = {
        'dubai': [25.276987, 55.296249],
        'singapore': [1.352083, 103.819839],
        'berlin': [52.520008, 13.404954],
        'tokyo': [35.689487, 139.691711],
        'san francisco': [37.774929, -122.419418],
        'london': [51.507351, -0.127758],
        'paris': [48.856613, 2.352222],
        'new york': [40.712776, -74.005974],
        'sydney': [-33.868820, 151.209290]
    }

    for idx, row in location_counts.iterrows():
        city = row[location_col]
        count = row['count']
        coords = city_coords.get(city)
        if coords:
            folium.CircleMarker(
                location=coords,
                radius=5 + count*0.5,  # حجم الدائرة يعبر عن عدد الوظائف
                popup=f"{city.title()}: {count} jobs",
                color='crimson',
                fill=True,
                fill_color='crimson'
            ).add_to(m)

    if save_path:
        m.save(save_path)
        print(f"تم حفظ الخريطة في {save_path}")

    m.save('jobs_map.html')  # حفظ ملف الخريطة
    print("تم إنشاء الخريطة jobs_map.html، افتحها في المتصفح.")

def correlation_analysis(df):
    # نحتاج نحلل الأعمدة الرقمية فقط
    numeric_cols = ['Salary_USD']
    # ترميز أعمدة الفئات الرقمية (مثلاً AI_Adoption_Level و Automation_Risk)
    mapping = {'low': 1, 'medium': 2, 'high': 3}

    for col in ['AI_Adoption_Level', 'Automation_Risk']:
        df[col+'_num'] = df[col].map(mapping)

    corr_df = df[['Salary_USD', 'AI_Adoption_Level_num', 'Automation_Risk_num']].dropna()
    corr = corr_df.corr()

    print("\nCorrelation matrix:\n", corr)

    plt.figure(figsize=(8,6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')
    plt.title('Correlation between Salary, AI Adoption Level, and Automation Risk')
    plt.show()

def main():
    file_path = 'ai_job_market_insights.csv'  # غيره حسب ملفك

    df = load_data(file_path)

    # إحصائيات عامة
    summary_stats(df, 'Job_Title')
    summary_stats(df, 'Industry')

    # عرض أعلى 10 وظائف وقطاعات
    plot_top_categories(df, 'Job_Title', save_path='top_jobs.png')
    plot_top_categories(df, 'Industry', save_path='top_industries.png')

    # توزيع الرواتب حسب القطاع
    plot_salary_distribution(df, 'Industry', save_path='salary_by_industry.png')

    # تحليل المهارات مع دعم تعدد المهارات في النص
    skills_to_analyze = ['python', 'javascript', 'machine learning']
    analyze_skills(df, skills_to_analyze, save_dir='skill_plots')

    # نسبة الوظائف التي تسمح بالعمل عن بعد
    plot_remote_friendly(df, save_path='remote_friendly.png')

    # تحليل جغرافي (لو مكتبة folium موجودة)
    plot_geo_distribution(df, save_path='jobs_map.html')

    # تحليل الارتباط بين الرواتب ومستوى تبني الذكاء الاصطناعي ومخاطر الأتمتة
    correlation_analysis(df)

if __name__ == '__main__':
    main()